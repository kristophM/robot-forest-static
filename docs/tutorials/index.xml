<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials on Robot Forest</title>
    <link>https://robotforest.io/tutorials/</link>
    <description>Recent content in Tutorials on Robot Forest</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 26 Jun 2019 22:20:08 -0400</lastBuildDate>
    
	<atom:link href="https://robotforest.io/tutorials/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python Loops</title>
      <link>https://robotforest.io/tutorials/python/loops/</link>
      <pubDate>Wed, 26 Jun 2019 22:20:08 -0400</pubDate>
      
      <guid>https://robotforest.io/tutorials/python/loops/</guid>
      <description>Python Loops Executing code based on conditions is very easy with Python, and like other languages, except with indentation and a few idioms.
While Loops While loops behave similarly to those in other programming languages.
x = 10 while x &amp;gt; 0: print(x) x -= 1  Break and Continue The break keyword allows one to break out of the current loop. This works in other Python loops as well.</description>
    </item>
    
    <item>
      <title>Intro</title>
      <link>https://robotforest.io/tutorials/python/intro/</link>
      <pubDate>Tue, 25 Jun 2019 22:35:32 -0400</pubDate>
      
      <guid>https://robotforest.io/tutorials/python/intro/</guid>
      <description>Background Invented by: Guido van Rossum
Python has two principle versions: 2 and 3. Both are widely used today and it&amp;rsquo;s important to note which version is used in whatever software you&amp;rsquo;re looking at. These tutorials will feature the more modern Version 3.
Characteristics  Interpreted
 Duck-typed
 Object oriented, but with support for functional programming
  Why is Python good for ML  A plethora of math-oriented libraries</description>
    </item>
    
    <item>
      <title>01_getting_started</title>
      <link>https://robotforest.io/tutorials/numpy/getting_started/</link>
      <pubDate>Sun, 23 Jun 2019 22:46:00 -0400</pubDate>
      
      <guid>https://robotforest.io/tutorials/numpy/getting_started/</guid>
      <description>Getting Started with Numpy (Coming Soon)</description>
    </item>
    
    <item>
      <title>IO: Deleting Files</title>
      <link>https://robotforest.io/tutorials/python/io_deleting_files/</link>
      <pubDate>Sun, 23 Jun 2019 22:38:39 -0400</pubDate>
      
      <guid>https://robotforest.io/tutorials/python/io_deleting_files/</guid>
      <description>Python Deleting Files Deleting a file in Python is done with a separate module, the os module.
data.txt
import os os.remove(&#39;data.txt&#39;)  Check if a File or Folder Exists You will get an error if you try to delete a file that doesn&amp;rsquo;t exist, so it&amp;rsquo;s always best to check:
import os if os.path.exists(&#39;data.txt&#39;): os.remove(&#39;data.txt&#39;) else: print(&amp;quot;Well, that&#39;s not going to work!&amp;quot;)  Deleting an Entire Folder Deleting an entire folder is as simple as calling the rmdir method of os.</description>
    </item>
    
    <item>
      <title>IO: Writing Files</title>
      <link>https://robotforest.io/tutorials/python/io_creating_and_writing_to_files/</link>
      <pubDate>Sun, 23 Jun 2019 22:38:39 -0400</pubDate>
      
      <guid>https://robotforest.io/tutorials/python/io_creating_and_writing_to_files/</guid>
      <description>Python Creating and Writing to Files Writing to a file is as simple as opening an existing file or creating a new one, using the correct modes, and then calling the write() method.
Creating a New File You can create a new file by first opening a file. You must open the file by using the x (create), a (append), and w (write) modes.
f = open(&#39;data.txt&#39;, &#39;w&#39;) f.write(&#39;3 5 1 0 24&#39;) f.</description>
    </item>
    
    <item>
      <title>IO: Reading Files</title>
      <link>https://robotforest.io/tutorials/python/io_reading_files/</link>
      <pubDate>Sun, 23 Jun 2019 22:38:23 -0400</pubDate>
      
      <guid>https://robotforest.io/tutorials/python/io_reading_files/</guid>
      <description> Python Reading Files Once you&amp;rsquo;ve opened a file, you may read it using Python&amp;rsquo;s built-in read() function.
telegram.txt
The quick brown fox jumped over the lazy dog&#39;s back.  f = open(&#39;telegram.txt&#39;, &#39;r&#39;) print(f.read()) # read only the first 50 characters: print(f.read(50))  </description>
    </item>
    
    <item>
      <title>IO: File Handling</title>
      <link>https://robotforest.io/tutorials/python/io_file_handling/</link>
      <pubDate>Sun, 23 Jun 2019 22:38:04 -0400</pubDate>
      
      <guid>https://robotforest.io/tutorials/python/io_file_handling/</guid>
      <description>Python File Handling Python has extensive methods for handling files and working with the filesystem without the need for other libraries.
Opening Files The act of opening a file loads the content of the file into memory. In Python you have the option of either loading the file as binary or as text.
# Open a file as text text_file = open(&#39;notes.txt&#39;) # Open a file as binary binary_file = open(&#39;profile_photo.</description>
    </item>
    
    <item>
      <title>Error Handling</title>
      <link>https://robotforest.io/tutorials/python/error_handling/</link>
      <pubDate>Sun, 23 Jun 2019 22:35:56 -0400</pubDate>
      
      <guid>https://robotforest.io/tutorials/python/error_handling/</guid>
      <description>Python Error Handling Python handles exceptions in a similar manner to other languages using try, except, and finally.
The try block allows you to write code that has the potential of raising an exception.
The except block intercepts the exception before a crash is about to occur, and lets you handle the exception.
The finally block executes no matter what, at the end of the try-except block.
Handle the Exception If you suspect a block of code has a chance of failing, wrap the code in a try&amp;hellip;except block.</description>
    </item>
    
    <item>
      <title>Command Line</title>
      <link>https://robotforest.io/tutorials/python/command_line/</link>
      <pubDate>Sun, 23 Jun 2019 22:35:32 -0400</pubDate>
      
      <guid>https://robotforest.io/tutorials/python/command_line/</guid>
      <description>Interacting with the Command Line via Python At times, you may want Python to communicate with the system, just as if you were typing something into a Bash shell in a terminal window.
For example, you may want to:
 Run an executable from the command line since the program is not written in Python
 Change the access permissions for a file or folder on the system
 Prompt the user for input (if you are writing a command line program)</description>
    </item>
    
    <item>
      <title>Package Management</title>
      <link>https://robotforest.io/tutorials/python/package_management/</link>
      <pubDate>Sun, 23 Jun 2019 22:34:01 -0400</pubDate>
      
      <guid>https://robotforest.io/tutorials/python/package_management/</guid>
      <description>Package Management in Python What is a package? A package consists of all the files needed for a module to operate. Analogous to NPM and package.json in JavaScript, and Bundler and Gems in Ruby, Python manages packages through either Anaconda. or PIP.
Anaconda Anaconda is recommended for data scientists and ML practitioners, because of its integrated tools for connecting to data sources, collaborating, and deploying models to production.
Perhaps one of the biggest differentiators of Anaconda is that it allows you to set your own environments, each containing different Python versions, and associated packages that are compatible.</description>
    </item>
    
    <item>
      <title>Regex</title>
      <link>https://robotforest.io/tutorials/python/regex/</link>
      <pubDate>Sun, 23 Jun 2019 22:33:32 -0400</pubDate>
      
      <guid>https://robotforest.io/tutorials/python/regex/</guid>
      <description>Python RegEx Python is really good at handling regular expressions (&amp;ldquo;RegEx&amp;rdquo;) and has a built-in module called re.
Check if a String Contains a Matching Substring The regex search() method allows us to search for substrings matching the regex search criteria.
import re txt = &amp;quot;3 blind mice&amp;quot; # Check to see if the string contains a number x = re.search(&amp;quot;\d&amp;quot;, txt)  Locate the Range of a Substring Within a String import re txt = &amp;quot;You can contact Arthur at am@mgn.</description>
    </item>
    
    <item>
      <title>JSON</title>
      <link>https://robotforest.io/tutorials/python/json/</link>
      <pubDate>Sun, 23 Jun 2019 22:33:15 -0400</pubDate>
      
      <guid>https://robotforest.io/tutorials/python/json/</guid>
      <description>Python JSON Python includes a built-in module called json that can be used to work with JSON data.
Parsing JSON To convert a JSON string to a python dictionary, use the json.loads() method.
import json # A JSON string data_string = &amp;quot;{\&amp;quot;id\&amp;quot;:1,\&amp;quot;user_id\&amp;quot;:6,\&amp;quot;photo_id\&amp;quot;:5,\&amp;quot;created_at\&amp;quot;:\&amp;quot;2019-02-12T04:26:15.115Z\&amp;quot;,\&amp;quot;updated_at\&amp;quot;:\&amp;quot;2019-02-12T04:26:15.115Z\&amp;quot;}&amp;quot; # Convert to Dictionary data_dict = json.loads(data_string) # Print the value of one of the dictionary keys print(data_dict[&#39;user_id&#39;])  Converting Dictionaries to JSON To convert from Python dictionaries to JSON, use the dumps() method.</description>
    </item>
    
    <item>
      <title>Modules</title>
      <link>https://robotforest.io/tutorials/python/modules/</link>
      <pubDate>Sun, 23 Jun 2019 22:33:02 -0400</pubDate>
      
      <guid>https://robotforest.io/tutorials/python/modules/</guid>
      <description>Python Module Organization Modules help organize code into distinct sections. They can be thought of as separate libraries of code encapsulated into an object that can be imported in other code.
Create a Module To create a module, you save code in a Python file.
Note: The file name is important because this will be the name of the module
# Save this code in a file called robotnames.py def get_names(): return [&#39;R2D2&#39;, &#39;C3PO&#39;, &#39;HAL&#39;, &#39;Doraemon&#39;]  Import a Module To import a module, simply use the import command.</description>
    </item>
    
    <item>
      <title>Dates</title>
      <link>https://robotforest.io/tutorials/python/dates/</link>
      <pubDate>Sun, 23 Jun 2019 22:29:20 -0400</pubDate>
      
      <guid>https://robotforest.io/tutorials/python/dates/</guid>
      <description>Python Dates and Time Dates and Time are a big topic in every language. Python does not consider dates and times to be native types but includes a built-in datetime module that can be imported.
Creating a DateTime Object A datetime object is constructed by calling datetime with the year, month, and day as arguments. You can further specify hours, minutes, and seconds.
import datetime bday = datetime.datetime(1912, 6, 23) print(&amp;quot;Alan Turing&#39;s birthday was: &amp;quot;, bday) lunch_appointment = datetime.</description>
    </item>
    
    <item>
      <title>Iterators</title>
      <link>https://robotforest.io/tutorials/python/iterators/</link>
      <pubDate>Sun, 23 Jun 2019 22:20:30 -0400</pubDate>
      
      <guid>https://robotforest.io/tutorials/python/iterators/</guid>
      <description>Python Iterators An iterator in Python is an object that can be iterated upon, meaning it has a countable number of values. Examples of iterables are Lists, Tuples, Sets, and Dictionaries&amp;ndash;all the collections in Python.
The technical definition of an iterator in Python is that it conforms to the iterator protocol, meaning that it responds to __iter__() and __next__().
Iterators and Iterables: What&amp;rsquo;s the Difference? An iterator is an object that can be iterated upon.</description>
    </item>
    
    <item>
      <title>Classes and Objects</title>
      <link>https://robotforest.io/tutorials/python/classes_and_objects/</link>
      <pubDate>Sun, 23 Jun 2019 22:20:25 -0400</pubDate>
      
      <guid>https://robotforest.io/tutorials/python/classes_and_objects/</guid>
      <description>Python Object Oriented Programming In Python nearly everything is an object, and thus has methods and properties. Let&amp;rsquo;s learn to create our own using classes.
Create a Class To create a class in Python, you use the class keyword.
class Car: num_wheels = 4  Instantiate an Object To create a new instance of class Car, we follow the name of the class with parentheses.
car = Car() print(car.num_wheels)  The init Initialization Block Every class can be initialized with certain values.</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://robotforest.io/tutorials/python/functions/</link>
      <pubDate>Sun, 23 Jun 2019 22:20:25 -0400</pubDate>
      
      <guid>https://robotforest.io/tutorials/python/functions/</guid>
      <description>Python Functions Python functions are very straightforward and follow the same pattern of indentation that you would expect.
Defining a function and Calling it Functions are defined by the def keyword, followed by a name and parentheses containing arguments, and then a colon (&amp;rdquo;:&amp;ldquo;). The body of the function MUST be indented.
Calling a function is as simple as using its name, followed by parentheses.
def greet(): print(&amp;quot;Bonjour!&amp;quot;) greet()  Unlike in Ruby, you MUST specify parentheses even if your function doesn&amp;rsquo;t take arguments.</description>
    </item>
    
    <item>
      <title>Inheritance and Polymorphism</title>
      <link>https://robotforest.io/tutorials/python/inheritance_and_polymorphism/</link>
      <pubDate>Sun, 23 Jun 2019 22:20:25 -0400</pubDate>
      
      <guid>https://robotforest.io/tutorials/python/inheritance_and_polymorphism/</guid>
      <description>Python Inheritance Python supports inheritance, as well as multiple inheritance. Inheriting from an existing class is easy.
Syntax class MusicalInstrument: def __init__(self, name, musical_key): self.name = name self.musical_key = musical_key def printInfo(self): print(&amp;quot;The key of this&amp;quot;, self.name, &amp;quot;is&amp;quot;, self.musical_key) class Saxophone(MusicalInstrument): pass alto_sax = Saxophone(&#39;Alto Saxophone&#39;, &#39;Eb&#39;) alto_sax.printInfo()  Overrides and Polymorphism Polymorphism means an object can take many forms. Python supports polymorphism in several ways. One can see easily that methods on the class, including the initialization method, can be overwritten without any special &amp;ldquo;override&amp;rdquo; annotation.</description>
    </item>
    
    <item>
      <title>Lambdas</title>
      <link>https://robotforest.io/tutorials/python/lambdas/</link>
      <pubDate>Sun, 23 Jun 2019 22:20:25 -0400</pubDate>
      
      <guid>https://robotforest.io/tutorials/python/lambdas/</guid>
      <description>Python Lambdas Lambdas are small anonymous functions. They are often used to pass functions as arguments into other functions, and can accept any number of arguments, but MUST have only ONE expression.
Syntax The lambda syntax in Python involves using the lambda keyword, along with some argument names, followed by a colon (&amp;rdquo;:&amp;ldquo;), and an expression to be returned.
lambda arguments : expression  NOTE: In lambdas, return keywords are not used in the expression, since a lambda only allows one expression, the content of which is returned.</description>
    </item>
    
    <item>
      <title>Control Flow</title>
      <link>https://robotforest.io/tutorials/python/control_flow/</link>
      <pubDate>Sun, 23 Jun 2019 22:20:08 -0400</pubDate>
      
      <guid>https://robotforest.io/tutorials/python/control_flow/</guid>
      <description>Python Control Flow Executing code based on conditions is very easy with Python, and like other languages, except with indentation and a few idioms.
If&amp;hellip; Else x = 5 if x &amp;lt; 7: print(&amp;quot;success&amp;quot;) else: print(&amp;quot;nope&amp;quot;)  Elif x = 7 if x &amp;lt; 7: print(&amp;quot;success&amp;quot;) elif x == 7: print(&amp;quot;exact match&amp;quot;) else: print(&amp;quot;nope&amp;quot;)  Python&amp;rsquo;s answer to the Ternary Operator In other languages such as Ruby and Javascript you may be used to seeing a so-called &amp;ldquo;ternary&amp;rdquo; operator of the form x == 5 ?</description>
    </item>
    
    <item>
      <title>Dictionaries</title>
      <link>https://robotforest.io/tutorials/python/dictionaries/</link>
      <pubDate>Sun, 23 Jun 2019 22:19:55 -0400</pubDate>
      
      <guid>https://robotforest.io/tutorials/python/dictionaries/</guid>
      <description>Python Dictionaries Dictionaries are collections of key-value pairs, which are unordered and changeable. In other languages, dictionaries may be known as hashes (Ruby), maps (Go), HashMaps (Java), or objects (JavaScript).
When are they most useful? When elements in your collection need to be labeled.
Creating a Dictionary A dictionary can be constructed either by using curly braces (similar to javascript objects), or using the dict() constructor.
# Curly brace method lightbulb = {&amp;quot;brand&amp;quot;: &amp;quot;GE&amp;quot;, &amp;quot;socket_type&amp;quot;=&amp;quot;E45&amp;quot;, &amp;quot;wattage&amp;quot;: 45} # dict() constructor lightbulb = dict(brand=&amp;quot;GE&amp;quot;, socket_type=&amp;quot;E45&amp;quot;, wattage=45)  Note: The values do not always have to be the same type.</description>
    </item>
    
    <item>
      <title>Sets</title>
      <link>https://robotforest.io/tutorials/python/sets/</link>
      <pubDate>Sun, 23 Jun 2019 22:05:30 -0400</pubDate>
      
      <guid>https://robotforest.io/tutorials/python/sets/</guid>
      <description>Python Sets Python sets are similar to lists except that the values are unordered and duplicates are not allowed.
When are they most useful?
Creating a Set Sets can be created using curly braces.
carset = {&#39;BMW&#39;, &#39;Mercedes&#39;, &#39;Porsche&#39;} print(carset)  NOTE: Sets are unordered, so you may not access values of a set by index like you can with lists. However, you can look through a set since it is an iterable.</description>
    </item>
    
    <item>
      <title>Tuples</title>
      <link>https://robotforest.io/tutorials/python/tuples/</link>
      <pubDate>Sun, 23 Jun 2019 22:05:20 -0400</pubDate>
      
      <guid>https://robotforest.io/tutorials/python/tuples/</guid>
      <description>Python Tuples A tuple is a collection which is ordered and unchangeable. In Python, tuples can contain multiple types. Tuples are often most useful when you need an object that holds multiple values, but don&amp;rsquo;t want to invest in the heavy effort of creating a whole class.
Create a Tuple tup = (&#39;Illustrator&#39;, 20.99, &#39;Pro&#39;) print(tup)  NOTE: Tuples cannot be changed once created.
Accessing Tuple Values You can access tuple items by their index using brackets (&amp;rdquo;[]&amp;ldquo;).</description>
    </item>
    
    <item>
      <title>Lists</title>
      <link>https://robotforest.io/tutorials/python/lists/</link>
      <pubDate>Sun, 23 Jun 2019 22:05:08 -0400</pubDate>
      
      <guid>https://robotforest.io/tutorials/python/lists/</guid>
      <description>Python Collections Python allows for 4 types of collections: list, tuple, set, and dictionary.
    Ordered? Can change values? Allows duplicates?     List Yes Yes Yes   Tuple Yes No Yes   Set No No No   Dictionary No Yes No    Lists Lists are ordered collections of values, which can be changed. Python doesn&amp;rsquo;t ship with native support for arrays, but lists work fine for most applications.</description>
    </item>
    
    <item>
      <title>Operators</title>
      <link>https://robotforest.io/tutorials/python/operators/</link>
      <pubDate>Sun, 23 Jun 2019 22:04:58 -0400</pubDate>
      
      <guid>https://robotforest.io/tutorials/python/operators/</guid>
      <description>Python Operators Python has all the standard operators for working with data and logic, however, many of the language&amp;rsquo;s unique idioms reveal themselves here.
Arithmetic Operators Arithmetic operators are for basic math operations on numerical variables. Note that some operations, such as the plus sign (&amp;ldquo;+&amp;rdquo;) can be applied to strings and lists, and not just numerical variables.
   Operator Name Example     + Addition x + y   - Subtraction x - y   * Multiplication x * y   / Division x / y   % Modulus x % y   ** Exponentiation x ** y   // Floor division x // y    TODO: [REPL]</description>
    </item>
    
    <item>
      <title>Strings</title>
      <link>https://robotforest.io/tutorials/python/strings/</link>
      <pubDate>Sun, 23 Jun 2019 22:04:38 -0400</pubDate>
      
      <guid>https://robotforest.io/tutorials/python/strings/</guid>
      <description>Python strings In Python, like in other classic programming languages, strings are simply arrays of characters. More specifically, they are arrays of bytes representing unicode characters.
Declaring Strings Strings can be declared with either single or double quotes. By having two types, you may include quotes in your strings without needing to escape them.
my_string = &#39;Wild thing, you make my heart sing.&#39; my_string2 = &#39;&amp;quot;Wild thing&amp;quot;, you make my heart sing.</description>
    </item>
    
    <item>
      <title>Type Casting</title>
      <link>https://robotforest.io/tutorials/python/type_casting/</link>
      <pubDate>Sun, 23 Jun 2019 22:04:22 -0400</pubDate>
      
      <guid>https://robotforest.io/tutorials/python/type_casting/</guid>
      <description>Python Casting Casting in Python is typically performed by using constructor functions. Below you see how numerical types get converted into strings and vice versa.
w = str(8) x = int(3.8) y = int(&amp;quot;4&amp;quot;) z = float(&amp;quot;4&amp;quot;) print(x, y, z)  Implicit vs Explicit Type Casting Implicit type casting happens when an operation you execute in Python forces a variable to become another type
x = 1 + 2.5 y = &amp;quot;number of apples is: &amp;quot; + 1 print(x, y)  Explicit type casting happens when you define a cast in the code outright.</description>
    </item>
    
    <item>
      <title>Data Types</title>
      <link>https://robotforest.io/tutorials/python/data_types/</link>
      <pubDate>Sun, 23 Jun 2019 22:04:14 -0400</pubDate>
      
      <guid>https://robotforest.io/tutorials/python/data_types/</guid>
      <description>Python Data Types Python has very few primitive types: int, float, string, and boolean
Python Numeric Types Python has three types of numbers in its core library:
 int
 float
 complex
  Int Integers are whole numbers, positive or negative, with unlimited length. It&amp;rsquo;s not necessary to specify the precision bits (8, 16, 32, 64) like in other languages, as Python handles memory management automatically and there is not a set limit in bits that an integer can be.</description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>https://robotforest.io/tutorials/python/variables/</link>
      <pubDate>Sun, 23 Jun 2019 22:04:02 -0400</pubDate>
      
      <guid>https://robotforest.io/tutorials/python/variables/</guid>
      <description>Python Variables Python variables are created as soon as you define them and don&amp;rsquo;t need to be initialized, nor do their types need to be specified.
num_apples = 5 # initialized automatically as type &amp;quot;int&amp;quot; greeting = &#39;Hallo&#39; # initialized automatically as type string? avg = 6.4 # initialized automatically as type float? print(num_apples, greeting, avg)  Tip: Determine the type of a variable Use type() to determine the type (or class) of a variable.</description>
    </item>
    
    <item>
      <title>Syntax And Idioms</title>
      <link>https://robotforest.io/tutorials/python/syntax_and_idioms/</link>
      <pubDate>Sun, 23 Jun 2019 22:03:45 -0400</pubDate>
      
      <guid>https://robotforest.io/tutorials/python/syntax_and_idioms/</guid>
      <description>Python Syntax and Idioms Unlike the highly idiomatic syntax found in Ruby, ES6 Javascript, and some other languages, Python has few idioms. Furthermore, the syntax is very readable, and most functions are written nearly in plain English.
Syntax The most notable characteristics of Python syntax are:
 Indentation: Blocks (aka functions) and control flow (if, while, for loops) are delineated using indentation, rather than curly braces (C++, Java, C#, Javascript) or do/end (Ruby).</description>
    </item>
    
    <item>
      <title>Printing and Comments</title>
      <link>https://robotforest.io/tutorials/python/printing_and_comments/</link>
      <pubDate>Sun, 23 Jun 2019 22:02:57 -0400</pubDate>
      
      <guid>https://robotforest.io/tutorials/python/printing_and_comments/</guid>
      <description>Printing Strings Print statements use the print() command. In Python 3 and later, print must accept arguments in parentheses.
You may put as many arguments as you&amp;rsquo;d like, separated by commas.
print(&#39;Hey&#39;) print(&#39;Hello&#39;, &#39;Hallo&#39;, &#39;Hola&#39;)  Printing Interpolated Strings To insert content directly into strings, you can use the format method and utilize brackets as placeholders.
str = &amp;quot;The {} train is running with delays.&amp;quot; print(str.format(7)) # You can have multiple placeholders in a string.</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://robotforest.io/tutorials/python/getting_started/</link>
      <pubDate>Sun, 23 Jun 2019 22:02:08 -0400</pubDate>
      
      <guid>https://robotforest.io/tutorials/python/getting_started/</guid>
      <description>Installation on your local machine This tutorial provides embedded consoles for you to perform python exercises without installing it on your local machine, however, if you&amp;rsquo;d like to install Python locally, you may follow the instructions below.
Check for previous version of Python installed Many machines these days come already shipped with Python. Run the following command from a terminal to check for existence of python:
python -v  If the output shows a version, you have Python installed.</description>
    </item>
    
  </channel>
</rss>